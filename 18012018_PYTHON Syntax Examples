
PYTHON Syntax Examples

Python syntax examples to create, query, and manipulate the selected table.

##########SELECT

import cx_Oracle
#create connection object
con = cx_Oracle.connect('my username','my password','my connect string')

#create cursor object
cur = con.cursor()

#prepare a statment to run
prepared_statement = 'select SERIAL_NO,PRODUCTION_NAME,PSM_MAIL,DATE_RECEIVED,CLIENT_MAIL,PSM_CONTACT,PSM,REMARKS,CLIENT_CONTACT,CORPRATE_NAME,ASSIGN_TO from ONBOARD where SERIAL_NO = :SERIAL_NO'

#execute the statment with the bind value(s)
cur.execute(prepared_statement, ('my PK value',))

#fetch and print the results
results = cur.fetchall()
print (results)

########INSERT

import cx_Oracle
#create connection object
con = cx_Oracle.connect('my username','my password','my connect string')

#create cursor object
cur = con.cursor()

#prepare a statment to run
#bind variables are positional
prepared_statement = 'insert into ONBOARD(SERIAL_NO,PRODUCTION_NAME,PSM_MAIL,DATE_RECEIVED,CLIENT_MAIL,PSM_CONTACT,PSM,REMARKS,CLIENT_CONTACT,CORPRATE_NAME,ASSIGN_TO) values (:SERIAL_NO,:PRODUCTION_NAME,:PSM_MAIL,:DATE_RECEIVED,:CLIENT_MAIL,:PSM_CONTACT,:PSM,:REMARKS,:CLIENT_CONTACT,:CORPRATE_NAME,:ASSIGN_TO)'

#execute the statment with the bind value(s)
cur.execute(prepared_statement, ("VALUE FOR SERIAL_NO","VALUE FOR PRODUCTION_NAME","VALUE FOR PSM_MAIL","VALUE FOR DATE_RECEIVED","VALUE FOR CLIENT_MAIL","VALUE FOR PSM_CONTACT","VALUE FOR PSM","VALUE FOR REMARKS","VALUE FOR CLIENT_CONTACT","VALUE FOR CORPRATE_NAME","VALUE FOR ASSIGN_TO"))

#print number of affected rows
print('Number of rows inserted: ' + str(cur.rowcount))

#commit the transaction
con.commit()

########INSERT MULTIPLE

import cx_Oracle
#create connection object
con = cx_Oracle.connect('my username','my password','my connect string')

#define multiple rows to insert
rows = [("VALUE1 FOR SERIAL_NO","VALUE1 FOR PRODUCTION_NAME","VALUE1 FOR PSM_MAIL","VALUE1 FOR DATE_RECEIVED","VALUE1 FOR CLIENT_MAIL","VALUE1 FOR PSM_CONTACT","VALUE1 FOR PSM","VALUE1 FOR REMARKS","VALUE1 FOR CLIENT_CONTACT","VALUE1 FOR CORPRATE_NAME","VALUE1 FOR ASSIGN_TO"),
        ("VALUE2 FOR SERIAL_NO","VALUE2 FOR PRODUCTION_NAME","VALUE2 FOR PSM_MAIL","VALUE2 FOR DATE_RECEIVED","VALUE2 FOR CLIENT_MAIL","VALUE2 FOR PSM_CONTACT","VALUE2 FOR PSM","VALUE2 FOR REMARKS","VALUE2 FOR CLIENT_CONTACT","VALUE2 FOR CORPRATE_NAME","VALUE2 FOR ASSIGN_TO")]

#create cursor object
cur = con.cursor()

#prepare a statment to run
#bind variables are positional
prepared_statement = 'insert into ONBOARD(SERIAL_NO,PRODUCTION_NAME,PSM_MAIL,DATE_RECEIVED,CLIENT_MAIL,PSM_CONTACT,PSM,REMARKS,CLIENT_CONTACT,CORPRATE_NAME,ASSIGN_TO) values (:SERIAL_NO,:PRODUCTION_NAME,:PSM_MAIL,:DATE_RECEIVED,:CLIENT_MAIL,:PSM_CONTACT,:PSM,:REMARKS,:CLIENT_CONTACT,:CORPRATE_NAME,:ASSIGN_TO)'

#execute the statment with the bind value(s)
cur.executemany(prepared_statement, rows)

#print number of affected rows
print('Number of rows inserted: ' + str(cur.rowcount))

#commit the transaction
con.commit()

##########UPDATE

import cx_Oracle
#create connection object
con = cx_Oracle.connect('my username','my password','my connect string')

#create cursor object
cur = con.cursor()

#prepare a statment to run
#bind variables are positional
prepared_statement = 'update ONBOARD set PRODUCTION_NAME = :PRODUCTION_NAME,PSM_MAIL = :PSM_MAIL,DATE_RECEIVED = :DATE_RECEIVED,CLIENT_MAIL = :CLIENT_MAIL,PSM_CONTACT = :PSM_CONTACT,PSM = :PSM,REMARKS = :REMARKS,CLIENT_CONTACT = :CLIENT_CONTACT,CORPRATE_NAME = :CORPRATE_NAME,ASSIGN_TO = :ASSIGN_TO where SERIAL_NO = :SERIAL_NO'

#execute the statment with the bind value(s)
cur.execute(prepared_statement, ("VALUE FOR PRODUCTION_NAME","VALUE FOR PSM_MAIL","VALUE FOR DATE_RECEIVED","VALUE FOR CLIENT_MAIL","VALUE FOR PSM_CONTACT","VALUE FOR PSM","VALUE FOR REMARKS","VALUE FOR CLIENT_CONTACT","VALUE FOR CORPRATE_NAME","VALUE FOR ASSIGN_TO","VALUE FOR SERIAL_NO"))

#print number of affected rows
print('Number of rows updated: ' + str(cur.rowcount))

#commit the transaction
con.commit()

############DELETE

import cx_Oracle
#create connection object
con = cx_Oracle.connect('my username','my password','my connect string')

#create cursor object
cur = con.cursor()

#prepare a statment to run
#bind variables are positional
prepared_statement = 'delete from ONBOARD where SERIAL_NO = :SERIAL_NO'

#execute the statment with the bind value(s)
cur.execute(prepared_statement, ('my PK value',))

#print number of affected rows
print('Number of rows deleted: ' + str(cur.rowcount))

#commit the transaction
con.commit()

